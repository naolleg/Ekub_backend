// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
}

enum ROLE{
ADMIN
USER
}

enum STATUS{
  ACTIVE
  DEACTIVATED
  PENDING
}
model Users{

 id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      ROLE     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  middleName String
  lastName  String
  activeStatus STATUS @default(ACTIVE)  
  loans     Loans[]
  deposits  Deposits[]
  lots      Lots[]
  profile   Profile?


}
model Profile{

  id        Int       @id @default(autoincrement())
  lotId     Int       @unique
  userId    Int       @unique
  firstName String
  middleName String
  lastName  String
  gender    GENDER
  createdAt DateTime  @default(now())
  lot       Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
  user      Users      @relation(fields: [userId], references: [id] ,onDelete: Cascade ) 
  address  address[]
}


model Lots{

 id            Int       @id @default(autoincrement())
  categoryId    Int 
  registeredBy  Int
  isCompleted   Boolean
  createdAt     DateTime  @default(now())
  remaingDay    Int
  remaingAmount Decimal
  user          Users      @relation(fields: [registeredBy], references: [id] ,onDelete: Cascade )
  category      category   @relation(fields: [categoryId], references: [id] ,onDelete: Cascade )
  profile       Profile?
  loans         Loans[]
  deposits      Deposits[]
  winners       Winners?
}



model category{
 id           Int       @id @default(autoincrement())
  name         String
  amount       Decimal
  commission    Decimal
  createdAt    DateTime  @default(now())
  totalCount   Int
  totalAmount  Decimal
  totalCommition Decimal
  lot          Lots[]
  deposit      Deposits[]

}

model Deposits {
  id        Int       @id @default(autoincrement())
  lotId     Int
  userId    Int
  catgoryId  Int
  amount    Decimal
  remaining Decimal
  createdAt DateTime  @default(now())
  user      Users      @relation(fields: [userId], references: [id] ,onDelete: Cascade )
  lot       Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
  category   category   @relation(fields: [catgoryId], references: [id] ,onDelete: Cascade)
}


model Loans {
  id        Int       @id @default(autoincrement())
  lotId     Int
  userId    Int
  amount    Decimal
  createdAt DateTime  @default(now())
  lot       Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
  user      Users      @relation(fields: [userId], references: [id] ,onDelete: Cascade )
}

model Winners {
  id           Int       @id @default(autoincrement())
  lotId        Int       @unique
  registeredBy Int
  createdAt    DateTime  @default(now())
  lot          Lots       @relation(fields: [lotId], references: [id] ,onDelete: Cascade )
}
model address{
  id   Int       @id @default(autoincrement())
  profileId      Int
  city String
  subcity String
  werede String
  housenumber Int
  profile      Profile      @relation(fields: [profileId], references: [id] ,onDelete: Cascade )
}